# Enter assembler code here
#
# To add comments begin lines with #
# Code lines have 3 entries separated by tabs
# > First an optional label,
# > second an instruction mnemonic, and 
# > third an address label if required.
#
# Valid mnemonics are:
# HLT, ADD, SUB, STO, LDA,
# BR, BRZ, BRP, IN, OUT, DAT


# Variable initialisation and input
init	LDA	010
	STO	div
	STO	mCount
	STO	count
	LDA	001
	STO	m
	LDA	000
	STO	total
	IN
	STO	n
	IN
	STO	m2


# MOD/QUOT OPERATION
# Initialise both local variables as 0
loop	LDA	010
	STO	mCount
	LDA	000
	STO	quot
	STO	rem
# Main loop subtracts op2 from op1
# keeping track of number of loops
# and final remainder
modL	LDA	quot
	ADD	001
	STO	quot
	LDA	n
	STO	rem
	STO	op2
	SUB	div
	STO	n
# Check if finished
	BRP	modL
# If so output quot and rem
	LDA	quot
	SUB	001
	STO	n
# END MOD/QUOT OPERATION

# MULTIPLY OPERATION
# Initialise result of multiplication as 0
multiS	LDA	000
	STO	mRes
# Check if second operand is 0
# If it is then finish
multiL	LDA	op2
	BRZ	multiE
# Take 1 off of operand 2
	SUB	001
	STO	op2
	LDA	mRes
# Add operand 1 to the result
# for the number of times specififed by
# operand 2
	ADD	m
	STO	mRes
	LDA	op2
# Loop around again
	BR	multiL
# END MULTIPLY OPERATION

# Check if this is 1st multiplication or 2nd
multiE	LDA	mCount
	BRZ	end
	SUB	010
	STO	mCount
	LDA	total
	ADD	mRes
	STO	total
	LDA	m2
	STO	op2
	BR	multiS

# Store the result of the 2nd multiplication
end	LDA	mRes
	STO	m
	LDA	n
	BRZ	control
	BR	loop

control	LDA	count
	BRZ	output
	STO	m2
	SUB	010
	STO	count
	IN
	STO	div
	LDA	total
	STO	n
	LDA	000
	STO	total
	LDA	001
	STO	m
	BR	loop
	


output	LDA	total
	OUT
	HLT

	

# Data declarations
n	DAT
quot	DAT	000
rem	DAT	000
div	DAT	010
m	DAT	001 
total	DAT	000
mRes	DAT	000
m2	DAT	
op2	DAT
000	DAT	000
001	DAT	001
010	DAT	010
count	DAT	010
mCount	DAT	010










