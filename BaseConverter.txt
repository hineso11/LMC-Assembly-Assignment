# Throughout the program a "base algorithm will be referred
# to, this is outlined below:
# digit = n mod div
# n = n // div
# toAdd = digit * m
# total += toAdd
# m = m2 * m


# Variable initialisation and input
# First run through of algorithm requires
# 10 as divisor and base algorithm
# count
init	LDA	010
	STO	div
	STO	count
# Initial value of multiplier is 1 since this is used when
# calculating first digit
	LDA	001
	STO	m
# Overflow counter starts at 3
	LDA	003
	STO	oflow
# Total starts at 0
	LDA	000
	STO	total
# Read in the first number which is n
	IN
	STO	n
# Read in a (first base) which is used as first value of m2
	IN
	STO	m2
# Subtract 1 from overflow counter, check if should continue
loop	LDA	oflow
	BRZ	error
	SUB	001
	STO	oflow
# Initialise multiplication count with start value of 10	
	LDA	010
	STO	mCount
# MARK: MOD/QUOT Operation
# Initialise variables for mod/quot operation
	LDA	000
	STO	quot
	STO	rem
# Main loop subtracts div from op1
# keeping track of number of loops
# and final remainder
modL	LDA	quot
	ADD	001
	STO	quot
	LDA	n
	STO	rem
	STO	op1
	SUB	div
	STO	n
# Check if finished
	BRP	modL
# If so output quot and rem
	LDA	quot
	SUB	001
	STO	n
# END MOD/QUOT OPERATION
# MULTIPLY OPERATION
# Initialise result of multiplication as 0
multiS	LDA	000
	STO	mRes
# Check if first operand is 0
# If it is then finish
multiL	LDA	op1
	BRZ	multiE
# Take 1 off of operand 1
	SUB	001
	STO	op1
	LDA	mRes
# Add m (2nd operand) to the result
	ADD	m
	STO	mRes
# Loop around again
	BR	multiL
# END MULTIPLY OPERATION
# multiE: where the program returns to after finishing a
# multiplication
# Check if this is 1st multiplication or 2nd
multiE	LDA	mCount
	BRZ	2nd
# Decrement counter if first multiplication
	SUB	010
	STO	mCount
# Add the result of the 1st multiplication to total
	LDA	total
	ADD	mRes
	STO	total
# Load m2 as 1st operand for 2nd multiplication
	LDA	m2
	STO	op1
# Branch to 2nd multiplication start
	BR	multiS

# 2nd: where the program branches if 2nd multiplication is 
# complete
# Store the result of the 2nd multiplication as new m
2nd	LDA	mRes
	STO	m
# This is the end of the base algorithm
# So branch to control function if n == 0, else another 
# loop of the base algorithm is required
	LDA	n
	BRZ	control
	BR	loop

# control: function determines whether base algorithm needs
# to be run again with different inputs or whether the program
# is complete
# If count == 0 then program should output result
control	LDA	count
	BRZ	output
# Else, the program should load the 2nd set of inputs for 
# base algorithm
# 10 will be stored in m2 since it must be in count if 
# count != 0
	STO	m2
	SUB	010
# Store 0 in count
	STO	count
# Get b (the 2nd base) in and store it as the divisor 
	IN
	STO	div
# Move the total to be the new value of n
	LDA	total
	STO	n
# Reset total to 0
	LDA	000
	STO	total
# Reset m to 1
	LDA	001
	STO	m
# Reset overflow counter to 3
	LDA	003
	STO	oflow
# Branch to start of base algorithm
	BR	loop

# MARK: Output function
output	LDA	total
out	OUT
	HLT

# MARK: Error function
# Load in error code and branch to out 
# This saves a mailbox by reusing HLT command
error	LDA	999
	BR	out

# MARK: Data declarations
# n: stores the original number given by the user
# then subsequently the number in base 10 on 2nd run
n	DAT
# quot and rem: are variables used locally in the
# mod operation
quot	DAT	000
rem	DAT	000
# div: used in main algorithm as divisor for
# mod/quot operation
div	DAT	010
# m: the multiplier used to determine what to
# add to the running total of new number
m	DAT	001
# total: running total for the new number
# also used to initialise new n
total	DAT	000
# mRes: used locally in the multiply operation
# to hold the result of the computation
mRes	DAT	000
# m2: the second operand in multiplier function
# to determine new m at end of main algorithm
m2	DAT
# op1: first operand used in the multiply operation
op1	DAT
# count: counter used to track number of runs of base 
# algorithm
count	DAT	010
# mCount: counter used to track whether 1st or 2nd 
# multiplication of base algorithm should be computed
mCount	DAT	010
# oflow: Counter used to monitor whether an overflow has occured
oflow	DAT	003
# Various constant data values
000	DAT	000
001	DAT	001
003	DAT	003
010	DAT	010
999	DAT	999



